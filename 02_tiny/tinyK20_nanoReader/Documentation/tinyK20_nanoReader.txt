=============================================================================
List of generated methods in project: tinyK20_nanoReader

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "LED1"      (component LED)
   - LED1_On -This turns the LED on.
   - LED1_Off -This turns the LED off.
   - LED1_Neg -This negates/toggles the LED
   - LED1_Get -This returns logical 1 in case the LED is on, 0 otherwise.
   - LED1_Put -Turns the LED on or off.
   - LED1_SetRatio16 -Method to specify the duty cycle. If using a PWM pin, this means the duty cycle is set. For On/off pins, 
                values smaller 0x7FFF means off, while values greater means on.
   - LED1_Deinit -Deinitializes the driver
   - LED1_Init -Performs the LED driver initialization.

Module "MCUC1"     (component McuLibConfig)

Module "AS1"       (component AsynchroSerial)
   - AS1_Enable -Enables the component - it starts the send and receive functions. Events may be generated 
                ("DisableEvent"/"EnableEvent").
   - AS1_Disable -Disables the component - it stops the send and receive functions. No events will be generated.
   - AS1_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does not 
                wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the preferred 
                method to handle error and break exception in the interrupt mode is to use events <OnError> and <OnBreak> the 
                return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the information about an 
                exception in interrupt mode is returned only if there is a valid character ready to be read.
   - AS1_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.
   - AS1_RecvBlock -If any data is received, this method returns the block of the data and its length (and incidental error), 
                otherwise it returns an error code (it does not wait for data).  This method is available only if non-zero 
                length of the input buffer is defined and the receiver property is enabled.  If less than requested number of 
                characters is received only the available data is copied from the receive buffer to the user specified 
                destination. The value ERR_EXEMPTY is returned and the value of variable pointed by the Rcv parameter is set to 
                the number of received characters.
   - AS1_SendBlock -Sends a block of characters to the channel.  This method is available only if non-zero length of the output 
                buffer is defined and the transmitter property is enabled.
   - AS1_ClearRxBuf -Clears the receive buffer.  This method is available only if non-zero length of the input buffer is 
                defined and the receiver property is enabled.
   - AS1_ClearTxBuf -Clears the transmit buffer.  This method is available only if non-zero length of the output buffer is 
                defined and the receiver property is enabled.
   - AS1_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the receiver 
                property is enabled.
   - AS1_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.

Module "RTT1"      (component SeggerRTT)
   - RTT1_Read -Read from buffer
   - RTT1_Write -Write to buffer
   - RTT1_WriteString -Write to buffer
   - RTT1_printf -Stores a formatted string in SEGGER RTT control block. This data is sent to the host.
   - RTT1_GetKey -Returns a character/key
   - RTT1_WaitKey -Waits for a key and returns it.
   - RTT1_HasKey -Checks if at least one character for reading is available in the SEGGER RTT buffer
   - RTT1_SetTerminal -Sets the terminal to be used for output on channel 0.
   - RTT1_TerminalOut -Writes a string to the given terminal without changing the terminal for channel 0.
   - RTT1_ConfigUpBuffer -Configures the Up (device to host) buffer
   - RTT1_ConfigDownBuffer -Configures the Down (host to device) buffer
   - RTT1_RecvChar -Receives a character from channel 0. Returns ERR_RXEMPTY if no character available
   - RTT1_SendChar -Sends a character to channel 0.
   - RTT1_GetCharsInRxBuf -Returns the number of characters in the receive buffer.
   - RTT1_StdIOKeyPressed -StdIO handler for Shell
   - RTT1_StdIOReadChar -StdIO Handler for reading a character. It returns a zero byte if there is no character in input buffer.
   - RTT1_StdIOSendChar -StdIO handler to sends a character.
   - RTT1_GetStdio -Returns a pointer to the standard I/O
   - RTT1_Deinit -Driver deinitialization
   - RTT1_Init -Initializes the RTT Control Block.

Module "WAIT1"     (component Wait)
   - WAIT1_Wait10Cycles -Wait for 10 CPU cycles.
   - WAIT1_Wait100Cycles -Wait for 100 CPU cycles.
   - WAIT1_WaitCycles -Wait for a specified number of CPU cycles (16bit data type).
   - WAIT1_WaitLongCycles -Wait for a specified number of CPU cycles (32bit data type).
   - WAIT1_Waitms -Wait for a specified time in milliseconds.
   - WAIT1_Waitus -Wait for a specified time in microseconds.
   - WAIT1_Waitns -Wait for a specified time in nano seconds.
   - WAIT1_WaitOSms -If an RTOS is enabled, this routine will use a non-blocking wait method. Otherwise it will do a 
                busy/blocking wait.
   - WAIT1_Init -Driver initialization routine.
   - WAIT1_DeInit -Driver de-initialization routine

Module "CLS1"      (component Shell)
   - CLS1_PrintPrompt -Prints the prompt to the stdOut channel
   - CLS1_SendNum8u -Sends an 8bit unsigned number to the given I/O
   - CLS1_SendNum8s -Sends an 8bit signed number to the given I/O
   - CLS1_SendNum16u -Sends a 16bit unsigned number to the given I/O
   - CLS1_SendNum16s -Sends a 16bit signed number to the given I/O
   - CLS1_SendNum32u -Sends a 32bit unsigned number to the given I/O
   - CLS1_SendNum32s -Sends a 32bit signed number to the given I/O
   - CLS1_SendCh -Prints a character using an I/O function
   - CLS1_SendStr -Prints a string using an I/O function
   - CLS1_printfIO -Printf() style function using XFormat component, using a custom I/O handler.
   - CLS1_printf -Printf() style function using XFormat component, using the shell default I/O handler.
   - CLS1_SendData -Sends data using an I/O function. Unlike SendStr(), with this method it is possible to send binary data, 
                including zero bytes.
   - CLS1_PrintStatus -Prints various available system status information
   - CLS1_ParseCommand -Parses a shell command. Use 'help' to get a list of supported commands.
   - CLS1_IsHistoryCharacter -Returns TRUE if character is a history character
   - CLS1_ReadLine -Reads a line from stdIn and returns TRUE if we have a line, FALSE otherwise.
   - CLS1_PrintCommandFailed -Prints a standard message for failed or unknown commands
   - CLS1_IterateTable -Parses a shell command. It handles first the internal commands and will call the provided callback.
   - CLS1_SetStdio -Sets an StdIO structure which is returned by GetStdio()
   - CLS1_GetStdio -Returns the default stdio channel. This method is only available if a shell is enabled in the component 
                properties.
   - CLS1_RequestSerial -Used to get mutual access to the shell console. Only has an effect if using an RTOS with semaphore for 
                the console access.
   - CLS1_ReleaseSerial -Used to release mutual access to the shell console. Only has an effect if using an RTOS with semaphore 
                for the console access.
   - CLS1_ReadAndParseWithCommandTable -Reads characters from the default input channel and appends it to the buffer. Once a 
                new line has been detected, the line will be parsed using the handlers in the table.
   - CLS1_ParseWithCommandTable -Parses a shell command. It handles first the internal commands and will call the provided 
                callback.
   - CLS1_GetSemaphore -Return the semaphore of the shell.
   - CLS1_SendStatusStr -Prints a status string using an I/O function, formated for the 'status' command
   - CLS1_SendHelpStr -Prints a string using an I/O function, formated for the 'help' command
   - CLS1_ReadChar -Reads a character (blocking)
   - CLS1_SendChar -Sends a character (blocking)
   - CLS1_KeyPressed -Checks if a key has been pressed (a character is present in the input buffer)
   - CLS1_SendCharFct -Method to send a character using a standard I/O handle.
   - CLS1_Init -Initializes the module, especially creates the mutex semaphore if an RTOS is used.
   - CLS1_Deinit -De-Initializes the module, especially frees the mutex semaphore if an RTOS is used.

Module "UTIL1"     (component Utility)
   - UTIL1_strcpy -Same as normal strcpy, but safe as it does not write beyond the buffer.
   - UTIL1_strcat -Same as normal strcat, but safe as it does not write beyond the buffer.
   - UTIL1_strcatPad -Same as normal strcat, but safe as it does not write beyond the buffer. The buffer will be filled with a 
                pad character for a given length.
   - UTIL1_chcat -Adds a single character to a zero byte terminated string buffer. It cares about buffer overflow.
   - UTIL1_Num8sToStr -Converts a signed 8bit value into a string.
   - UTIL1_Num8uToStr -Converts an unsigned 8bit value into a string.
   - UTIL1_Num16sToStr -Converts a signed 16bit value into a string.
   - UTIL1_Num16uToStr -Converts a signed 16bit value into a string.
   - UTIL1_Num32uToStr -Converts an unsigned 32bit value into a string.
   - UTIL1_Num32sToStr -Converts a signed 32bit value into a string.
   - UTIL1_NumFloatToStr -Converts a float value into a string.
   - UTIL1_Num16sToStrFormatted -Converts a 16bit signed value to string.
   - UTIL1_Num16uToStrFormatted -Converts a 16bit unsigned value to string.
   - UTIL1_Num32uToStrFormatted -Converts a 32bit unsigned value to string.
   - UTIL1_Num32sToStrFormatted -Converts a 32bit signed value to string.
   - UTIL1_strcatNum8u -Appends a 8bit unsigned value to a string buffer.
   - UTIL1_strcatNum8s -Appends a 8bit signed value to a string buffer.
   - UTIL1_strcatNum16u -Appends a 16bit unsigned value to a string buffer.
   - UTIL1_strcatNum16s -Appends a 16bit signed value to a string buffer.
   - UTIL1_strcatNum32u -Appends a 32bit signed value to a string buffer.
   - UTIL1_strcatNum32s -Appends a 32bit signed value to a string buffer.
   - UTIL1_strcatNum16uFormatted -Appends a 16bit unsigned value to a string buffer in a formatted way.
   - UTIL1_strcatNum16sFormatted -Appends a 16bit signed value to a string buffer in a formatted way.
   - UTIL1_strcatNum32uFormatted -Appends a 32bit unsigned value to a string buffer in a formatted way.
   - UTIL1_strcatNum32sFormatted -Appends a 32bit signed value to a string buffer in a formatted way.
   - UTIL1_strcatNum8Hex -Appends a 8bit unsigned value to a string buffer as hex number (without a 0x prefix).
   - UTIL1_strcatNum16Hex -Appends a 16bit unsigned value to a string buffer as hex number (without a 0x prefix).
   - UTIL1_strcatNum24Hex -Appends a 32bit unsigned value to a string buffer as hex number (without a 0x prefix). Only 24bits 
                are used.
   - UTIL1_strcatNum32Hex -Appends a 16bit unsigned value to a string buffer as hex number (without a 0x prefix).
   - UTIL1_strcatNum32sDotValue100 -Appends a 32bit signed value to a string buffer. The value is in 1/100 units.  For example 
                for the value -13456 it will append the string "-134.56"
   - UTIL1_strcatNumFloat -Converts a float value into a string.
   - UTIL1_IsLeapYear -Returns true if a given year is a leap year
   - UTIL1_WeekDay -Returns the weekday for a given date >= 1.Jan.1900
   - UTIL1_ReadEscapedName -Scans an escaped name from a string. This is useful e.g. for double quoted file names.
   - UTIL1_xatoi -Custom atoi() (ascii to int) implementation by Elm Chan
   - UTIL1_ScanDate -Scans a date in the format "dd.mm.yyyy" or "dd-mm-yyyy". For yy it will expand it to 20yy.
   - UTIL1_ScanTime -Scans a time string in the format "hh:mm:ss,hh" with the part for the ",hh" is optional.
   - UTIL1_ScanDecimal8uNumber -Scans a decimal 8bit unsigned number
   - UTIL1_ScanDecimal8sNumber -Scans a decimal 8bit signed number
   - UTIL1_ScanDecimal16uNumber -Scans a decimal 16bit unsigned number
   - UTIL1_ScanDecimal16sNumber -Scans a decimal 16bit signed number
   - UTIL1_ScanDecimal32uNumber -Scans a decimal 32bit unsigned number
   - UTIL1_ScanDecimal32sNumber -Scans a decimal 32bit signed number
   - UTIL1_ScanDecimal32sDotNumber -Scans a decimal 32bit signed number with a following dot (fractional part), e.g. "-34587.
                0248", it will return the (signed) integral and fractional part with number of fractional zeros. The function 
                accepts as well numbers  like "17" (no fractional part" or "17.0"
   - UTIL1_ScanHex8uNumber -Scans a hexadecimal 8bit number, starting with 0x
   - UTIL1_ScanHex8uNumberNoPrefix -Scans a hexadecimal 8bit number, without 0x
   - UTIL1_ScanHex16uNumber -Scans a hexadecimal 16bit number, starting with 0x
   - UTIL1_ScanHex32uNumber -Scans a hexadecimal 32bit number, starting with 0x
   - UTIL1_ScanSeparatedNumbers -Scans multiple numbers separated by character, e.g. "123.68.5.3"
   - UTIL1_ScanDoubleQuotedString -Scans a string inside double quotes and returns it without the double quotes.
   - UTIL1_strcmp -Wrapper to the standard strcmp() routine
   - UTIL1_strncmp -Wrapper to the standard strncmp() routine
   - UTIL1_strFind -Searches a substring inside a string and returns the position.
   - UTIL1_strtailcmp -Compares the tail of a string and returns 0 if it matches, 1 otherwise
   - UTIL1_strlen -Wrapper to the standard strlen() function.
   - UTIL1_strCutTail -Removes a tailing substring from a string. The string passed will be modified (the tail is cut by 
                writing a zero byte to the string!)
   - UTIL1_GetValue16LE -Returns a 16bit Little Endian value from memory
   - UTIL1_GetValue24LE -Returns a 24bit Little Endian value from memory
   - UTIL1_GetValue32LE -Returns a 32bit Little Endian value from memory
   - UTIL1_SetValue16LE -Stores a 16bit value in memory as Little Endian
   - UTIL1_SetValue24LE -Stores a 24bit value in memory as Little Endian
   - UTIL1_SetValue32LE -Stores a 32bit value in memory as Little Endian
   - UTIL1_map -Maps a value from one range to another
   - UTIL1_map64 -Maps a value from one range to another, using 64bit math
   - UTIL1_constrain -Makes sure that a given input value is inside a given range.
   - UTIL1_random -Provides a random value. You have to call intialize the random number generator with randomSetSeed() first!
   - UTIL1_randomSetSeed -Sets a seed for the random number generator
   - UTIL1_Deinit -Driver De-Initialization
   - UTIL1_Init -Driver Initialization

Module "XF1"       (component XFormat)
   - XF1_xvformat -Printf() like format function
   - XF1_xformat -Printf() like function using variable arguments
   - XF1_xsprintf -sprintf() like function
   - XF1_xsnprintf -snprintf() like function, returns the number of characters written, negative in case of error.

Module "CS1"       (component CriticalSection)
   - CS1_CriticalVariable -Defines a variable if necessary. This is a macro.
   - CS1_EnterCritical -Enters a critical section
   - CS1_ExitCritical -Exits a critical section

Module "TMOUT1"    (component Timeout)
   - TMOUT1_GetCounter -Initializes a new timeout counter and returns the handle to it. At the end, use LeaveCounter() to free 
                up the resource.
   - TMOUT1_LeaveCounter -To be called to return the counter. Note that a counter always should be returned so it can be reused.
   - TMOUT1_Value -Return the current value of the counter (in ticks)
   - TMOUT1_SetCounter -Sets the counter to a new value and returns the value just prior to the call.
   - TMOUT1_CounterExpired -Returns true if the timeout counter has been expired
   - TMOUT1_AddTick -Method to be called from a periodic timer or interrupt. It will decrement all current counters by one down 
                to zero.
   - TMOUT1_Init -Initialization of the driver

Module "AS2"       (component AsynchroSerial)
   - AS2_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does not 
                wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the preferred 
                method to handle error and break exception in the interrupt mode is to use events <OnError> and <OnBreak> the 
                return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the information about an 
                exception in interrupt mode is returned only if there is a valid character ready to be read.
   - AS2_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.
   - AS2_RecvBlock -If any data is received, this method returns the block of the data and its length (and incidental error), 
                otherwise it returns an error code (it does not wait for data).  This method is available only if non-zero 
                length of the input buffer is defined and the receiver property is enabled.  If less than requested number of 
                characters is received only the available data is copied from the receive buffer to the user specified 
                destination. The value ERR_EXEMPTY is returned and the value of variable pointed by the Rcv parameter is set to 
                the number of received characters.
   - AS2_SendBlock -Sends a block of characters to the channel.  This method is available only if non-zero length of the output 
                buffer is defined and the transmitter property is enabled.
   - AS2_ClearRxBuf -Clears the receive buffer.  This method is available only if non-zero length of the input buffer is 
                defined and the receiver property is enabled.
   - AS2_ClearTxBuf -Clears the transmit buffer.  This method is available only if non-zero length of the output buffer is 
                defined and the receiver property is enabled.
   - AS2_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the receiver 
                property is enabled.
   - AS2_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.

Module "TmDt1"     (component GenericTimeDate)
   - TmDt1_AddTick -Increments the tick counter of the software RTC. Needs to be called periodically by the application to 
                increase the time tick count.
   - TmDt1_AddTicks -Same as AddTick(), but multiple ticks can be added in one step.
   - TmDt1_CalculateDayOfWeek -Returns the day of the week, Sunday starting as zero. Monday is 1, ...
   - TmDt1_SetTime -This method sets a new actual time of the software RTC.
   - TmDt1_GetTime -This method returns current time from the software RTC.
   - TmDt1_SetDate -This method sets a new actual date of the software RTC.
   - TmDt1_GetDate -This method returns current date from the software RTC.
   - TmDt1_SetTimeDate -This method sets a new actual time and date of the RTC.
   - TmDt1_GetTimeDate -This method returns current time and date from the RTC.
   - TmDt1_SetSWTimeDate -This method sets a new actual time and date of the software RTC.
   - TmDt1_GetSWTimeDate -This method returns current time and date from the software RTC.
   - TmDt1_SetInternalRTCTimeDate -This method sets a new actual time and date of the internal hardware RTC.
   - TmDt1_GetInternalRTCTimeDate -This method returns current time and date from the hardware RTC.
   - TmDt1_SyncWithInternalRTC -Synchronizes the software RTC with date and time from the internal hardware RTC
   - TmDt1_SyncSWtimeToInternalRTCsec -This method synchronizes the software RTC with the internal HW RTC. Because the internal 
                RTC only counts seconds, we sync on a second change.
   - TmDt1_SetExternalRTCTimeDate -This method sets a new actual time and date of the external hardware RTC.
   - TmDt1_GetExternalRTCTimeDate -This method returns current time and date from the external hardware RTC.
   - TmDt1_SyncWithExternalRTC -Synchronizes the software RTC with date and time from the hardware RTC. Note that if that RTC 
                interface requires interrupts, this function should be called only when interrupts are enabled.
   - TmDt1_UnixSecondsToTimeDateCustom -Transforms a given time/date into the Unix time stamp, with the number of seconds from 
                a starting date
   - TmDt1_UnixSecondsToTimeDate -Transforms a given time/date into the Unix time stamp, with the number of seconds after 
                1-Jan-1970
   - TmDt1_TimeDateToUnixSecondsCustom -Returns for a given time/date the corresponding UNIX time stamp with a custom base date.
   - TmDt1_TimeDateToUnixSeconds -Returns for a given time/date the corresponding UNIX time stamp, starting at 1-Jan-1970.
   - TmDt1_AddDateString -Adds a formatted date string to a buffer
   - TmDt1_AddTimeString -Adds a formatted time string to a buffer
   - TmDt1_DeInit -Deinitializes the driver.
   - TmDt1_Init -Initialization method

Module "Cpu"       (component MK20DX128FT5)

===================================================================================
